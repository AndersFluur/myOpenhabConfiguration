import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import org.joda.time.format.*


var Timer tOutdoorLightsSunset
var Timer tOutdoorLightsSunrise


rule "React to sunset"

when 
       Time cron "0 50 7 * * ?"   // Every day 15:15h, evaluate sunset
//       Time cron "0 0/2 * * * ?"   // Every minute
then
    var year   = now.getYear
    var month  = now.getMonthOfYear
    var day    = now.getDayOfMonth
    var sunsetString  = year+"-"+month+"-"+day+"T"+SunSetTime.state+"Z"
    var DateTime sunset = parse(sunsetString)
    logInfo("Sunset","sunset = " + sunset.toString)
    
    // Indoor Lights
     
     // Cancel timer to avoid reschedule
    if(tOutdoorLightsSunset!=null) {
        logInfo("Sunset","Timer tOutdoorLightsSunset cancelled") 
        tOutdoorLightsSunset.cancel()
    }
    tOutdoorLightsSunset = createTimer(sunset.minusMinutes(60)) [|
        logInfo("Sunset","Timer tOutdoorLightsSunset executed") 
        gSunSwitches?.members.forEach(Switch|
                sendCommand(Switch, ON)
        )
      ]
    logInfo("Sunset","Timer tOutdoorLightsSunset created and set to "+ sunset.minusMinutes(60).toString)

end

rule "React to sunrise"

when 
        Time cron "0 50 7 * * ?"   // Every day 15:15h, evaluate sunrise
//       Time cron "0 0/2 * * * ?"   // Every minute
then
    var year   = now.getYear
    var month  = now.getMonthOfYear
    var day    = now.getDayOfMonth
    var sunriseString  = year+"-"+month+"-"+day+"T"+SunRiseTime.state+"Z"
    var DateTime sunrise = parse(sunriseString)
    logInfo("Sunrise","sunriseString = " + sunriseString)
    
    // Outdoor Lights
     
     // Cancel timer to avoid reschedule
    if(tOutdoorLightsSunrise!=null) {
        logInfo("Sunrise","Timer tOutdoorLightsSunrise cancelled") 
        tOutdoorLightsSunrise.cancel()
    }
    tOutdoorLightsSunrise = createTimer(sunrise.plusMinutes(60)) [|
        logInfo("Sunrise","Timer tOutdoorLightsSunrise executed") 
        gSunSwitches?.members.forEach(Switch|
                sendCommand(Switch, OFF)
        )
      ]
    logInfo("Sunrise","Timer  tOutdoorLightsSunrise created at " + sunrise.plusMinutes(60).toString)
end


rule "Controller 43"

when
 	Item td_device_43 changed  
then
	if (td_device_43.state == ON) 
	{
		sendCommand(td_device_21,ON)
	}
	else
	{
		sendCommand(td_device_21,OFF)
	}
	
end

