import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import org.joda.time.format.*


var Timer tOutdoorLightsSunset
var Timer tOutdoorLightsSunrise


rule "React to sunset"

when 
        Time cron "0 15 15 * * ?"   // Every day 15:15h, evaluate sunset
then
    var year   = now.getYear
    var month  = now.getMonthOfYear
    var day    = now.getDayOfMonth
    var datum  = year+"-"+month+"-"+day+" "+SunSetTime.state
    logInfo("Sunset","datum = " + datum)
    var DateTime sunset = parse(year+"-"+month+"-"+day+"T"+SunSetTime.state)
    
    // Indoor Lights
     
     // Cancel timer to avoid reschedule
    if(tOutdoorLightsSunset!=null) {
        logInfo("Sunset","Timer tOutdoorLightsSunset cancelled") 
        tOutdoorLightsSunset.cancel()
    }
    logInfo("Sunset","Timer tOutdoorLightsSunset created") 
    tOutdoorLightsSunset = createTimer(sunset.minusMinutes(10)) [|
        logInfo("Sunset","Timer tOutdoorLightsSunset executed") 
        gSunSwitches?.members.forEach(Switch|
                sendCommand(Switch, ON)
        )
      ]
end

rule "React to sunrise"

when 
        Time cron "0 15 15 * * ?"   // Every day 15:15h, evaluate sunrise
then
    var year   = now.getYear
    var month  = now.getMonthOfYear
    var day    = now.getDayOfMonth
    var datum  = year+"-"+month+"-"+day+" "+SunRiseTime.state
    logInfo("Sunrise","datum = " + datum)
    var DateTime sunrise = parse(year+"-"+month+"-"+day+"T"+SunRiseTime.state)
    
    // Outdoor Lights
     
     // Cancel timer to avoid reschedule
    if(tOutdoorLightsSunrise!=null) {
        logInfo("Sunrise","Timer var Timer tOutdoorLightsSunrise cancelled") 
        tOutdoorLightsSunrise.cancel()
    }
    logInfo("Sunrise","Timer  tOutdoorLightsSunrise created") 
    tOutdoorLightsSunrise = createTimer(sunrise.plusMinutes(10)) [|
        logInfo("Sunrise","Timer tOutdoorLightsSunrise executed") 
        gSunSwitches?.members.forEach(Switch|
                sendCommand(Switch, OFF)
        )
      ]
end


rule "Controller 43"

when
 	Item td_device_43 changed  
then
	if (td_device_43.state == ON) 
	{
		sendCommand(td_device_21,ON)
	}
	else
	{
		sendCommand(td_device_21,OFF)
	}
	
end

