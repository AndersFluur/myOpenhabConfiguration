import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import org.joda.time.format.*
import java.lang.String

var DateTimeZone localDTZ

rule "Derive Local Sunrise Time"
when
//        Time cron "0/15/30/45 * * * * ?"   // Every day 13:15 hours, evaluate sunset
    Item SunRise received update
then
    var DateTime sunrise
    sunrise = new DateTime(SunRise.state.toString(), DateTimeZone::UTC)
//   logInfo("Base Rules", "*** *** *** SunRise Updated *** *** ***1::" + SunRise.state)
	 
    localDTZ = DateTimeZone::getDefault()
//    logDebug("Base Rules", "*** *** *** SunRiseTime Updated *** *** ***3::" + localDTZ.toString)
	
    sunrise = sunrise.withZone(localDTZ)
    logDebug("Base Rules", "*** *** *** Sunrise For Today *** *** ***4::")

    SunRiseTime.postUpdate(String::format("%02d:", sunrise.getHourOfDay) + String::format("%02d:00",sunrise.getMinuteOfHour))
    logDebug("Base Rules", "*** *** *** SunRiseTime Updated *** *** ***::" + SunRiseTime.state)
end

rule "Derive Local Sunset Time"
when
//        Time cron "0/15/30/45 * * * * ?"   // Every day 13:15 hours, evaluate sunset
    Item SunSet received update
then
	var DateTime sunset
    sunset = new DateTime(SunSet.state.toString(), DateTimeZone::UTC)
//   logInfo("Base Rules", "*** *** *** SunSet Updated *** *** ***1::" + SunSet.state)
	 
    localDTZ = DateTimeZone::getDefault()
//    logDebug("Base Rules", "*** *** *** SunSetTime Updated *** *** ***3::" + localDTZ.toString)
	
    sunset = sunset.withZone(localDTZ)
    logDebug("Base Rules", "*** *** *** Sunset For Today *** *** ***4::")

    SunSetTime.postUpdate(String::format("%02d:", sunset.getHourOfDay) + String::format("%02d:00",sunset.getMinuteOfHour))
    logDebug("Base Rules", "*** *** *** SunSetTime Updated *** *** ***::" + SunSetTime.state)

 
end
